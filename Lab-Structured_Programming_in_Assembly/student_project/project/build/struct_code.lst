


ARM Macro Assembler    Page 1 


    1 00000000         ; ------------------------------------------------------
                       ------------
    2 00000000         ; --  _____       ______  _____                         
                                  -
    3 00000000         ; -- |_   _|     |  ____|/ ____|                        
                                  -
    4 00000000         ; --   | |  _ __ | |__  | (___    Institute of Embedded 
                       Systems    -
    5 00000000         ; --   | | | '_ \|  __|  \___ \   Zurich University of  
                                  -
    6 00000000         ; --  _| |_| | | | |____ ____) |  Applied Sciences      
                                  -
    7 00000000         ; -- |_____|_| |_|______|_____/   8401 Winterthur, Switz
                       erland     -
    8 00000000         ; ------------------------------------------------------
                       ------------
    9 00000000         ; --
   10 00000000         ; -- main.s
   11 00000000         ; --
   12 00000000         ; -- CT1 P08 "Strukturierte Codierung" mit Assembler
   13 00000000         ; --
   14 00000000         ; -- $Id: struct_code.s 3787 2016-11-17 09:41:48Z kesr $
                       
   15 00000000         ; ------------------------------------------------------
                       ------------
   16 00000000         ;Directives
   17 00000000                 PRESERVE8
   18 00000000                 THUMB
   19 00000000         
   20 00000000         ; ------------------------------------------------------
                       ------------
   21 00000000         ; -- Address-Defines
   22 00000000         ; ------------------------------------------------------
                       ------------
   23 00000000         ; input
   24 00000000 60000200 
                       ADDR_DIP_SWITCH_7_0
                               EQU              0x60000200
   25 00000000 60000210 
                       ADDR_BUTTONS
                               EQU              0x60000210
   26 00000000         
   27 00000000         ; output
   28 00000000 60000100 
                       ADDR_LED_31_0
                               EQU              0x60000100
   29 00000000 60000114 
                       ADDR_7_SEG_BIN_DS3_0
                               EQU              0x60000114
   30 00000000 60000340 
                       ADDR_LCD_COLOUR
                               EQU              0x60000340
   31 00000000 60000300 
                       ADDR_LCD_ASCII
                               EQU              0x60000300
   32 00000000 60000302 
                       ADDR_LCD_ASCII_BIT_POS
                               EQU              0x60000302
   33 00000000 60000314 



ARM Macro Assembler    Page 2 


                       ADDR_LCD_ASCII_2ND_LINE
                               EQU              0x60000314
   34 00000000         
   35 00000000         
   36 00000000         ; ------------------------------------------------------
                       ------------
   37 00000000         ; -- Program-Defines
   38 00000000         ; ------------------------------------------------------
                       ------------
   39 00000000         ; value for clearing lcd
   40 00000000 00000000 
                       ASCII_DIGIT_CLEAR
                               EQU              0x00000000
   41 00000000 00000028 
                       LCD_LAST_OFFSET
                               EQU              0x00000028
   42 00000000         
   43 00000000         ; offset for showing the digit in the lcd
   44 00000000 00000030 
                       ASCII_DIGIT_OFFSET
                               EQU              0x00000030
   45 00000000         
   46 00000000         ; lcd background colors to be written
   47 00000000 00000000 
                       DISPLAY_COLOUR_RED
                               EQU              0
   48 00000000 00000002 
                       DISPLAY_COLOUR_GREEN
                               EQU              2
   49 00000000 00000004 
                       DISPLAY_COLOUR_BLUE
                               EQU              4
   50 00000000         
   51 00000000         ; checks
   52 00000000 00000001 
                       BUTTON_PRESSED
                               EQU              0x01
   53 00000000         ; ------------------------------------------------------
                       ------------
   54 00000000         ; -- myConstants
   55 00000000         ; ------------------------------------------------------
                       ------------
   56 00000000                 AREA             myConstants, DATA, READONLY
   57 00000000         ; display defines for hex / dec
   58 00000000 42 69 74 
              20       DISPLAY_BIT
                               DCB              "Bit "
   59 00000004 32      DISPLAY_2_BIT
                               DCB              "2"
   60 00000005 34      DISPLAY_4_BIT
                               DCB              "4"
   61 00000006 38      DISPLAY_8_BIT
                               DCB              "8"
   62 00000007 00              ALIGN
   63 00000008         
   64 00000008         ; ------------------------------------------------------
                       ------------
   65 00000008         ; -- myCode
   66 00000008         ; ------------------------------------------------------



ARM Macro Assembler    Page 3 


                       ------------
   67 00000008                 AREA             myCode, CODE, READONLY
   68 00000000                 ENTRY
   69 00000000         
   70 00000000         ; imports for calls
   71 00000000                 import           adc_init
   72 00000000                 import           adc_get_value
   73 00000000         
   74 00000000         main    PROC
   75 00000000                 export           main
   76 00000000         ; 8 bit resolution, cont. sampling
   77 00000000 F7FF FFFE       BL               adc_init
   78 00000004 F000 F839       BL               clear_lcd
   79 00000008         
   80 00000008         main_loop
   81 00000008         ; STUDENTS: To be programmed
   82 00000008 4825            LDR              R0, =ADDR_BUTTONS
   83 0000000A 7801            LDRB             R1, [R0, #0] ; Read all buttons
                                                             into the lower nib
                                                            ble of a byte.
   84 0000000C         
   85 0000000C 39F1            SUBS             R1, #0xF1
   86 0000000E D001            BEQ              t0_pressed  ; If R1 == 0x00 the
                                                            n go to t0_pressed
   87 00000010 D10E            BNE              t0_not_pressed ; If R1 != 0x00 
                                                            then go to t0_not_p
                                                            ressed
   88 00000012         ; END: To be programmed
   89 00000012 E7F9            B                main_loop
   90 00000014         
   91 00000014         t0_pressed
   92 00000014 F7FF FFFE       BL               adc_get_value ; The function ca
                                                            ll BL adc_get_value
                                                             will return the AD
                                                            C-value in the 32-b
                                                            it register R0. 
   93 00000018 08C0            LSRS             R0, R0, #3  ; Use a division by
                                                             8 (shift right) to
                                                             scale the ADC-valu
                                                            e from 8-bit down t
                                                            o 5-bit. Then use a
                                                             loop to calculate 
                                                            the magnitude of th
                                                            e LED-bar. 
   94 0000001A         
   95 0000001A 3001            ADDS             R0, #0x1
   96 0000001C 2100            MOVS             R1, #0
   97 0000001E         counter_loop
   98 0000001E 2301            MOVS             R3, #0x1
   99 00000020 4099            LSLS             R1, R1, R3
  100 00000022 3101            ADDS             R1, #0x1
  101 00000024         
  102 00000024 1E40            SUBS             R0, R0, #0x1
  103 00000026 D1FA            BNE              counter_loop
  104 00000028         
  105 00000028 4C1E            LDR              R4, =ADDR_LED_31_0
  106 0000002A 6021            STR              R1, [R4, #0]
  107 0000002C         
  108 0000002C E010            B                set_lcd_green



ARM Macro Assembler    Page 4 


  109 0000002E E7EB            B                main_loop
  110 00000030         
  111 00000030         t0_not_pressed
  112 00000030 F7FF FFFE       BL               adc_get_value ; The function ca
                                                            ll BL adc_get_value
                                                             will return the AD
                                                            C-value in the 32-b
                                                            it register R0.
  113 00000034         
  114 00000034         ; as we didn't press T0 we need to clear the LED's
  115 00000034 B403            PUSH             { R0, R1 }
  116 00000036 2000            MOVS             R0, #0x00
  117 00000038 491A            LDR              R1, =ADDR_LED_31_0
  118 0000003A 6008            STR              R0, [R1, #0]
  119 0000003C BC03            POP              { R0, R1 }
  120 0000003E         
  121 0000003E 491A            LDR              R1, =ADDR_DIP_SWITCH_7_0
  122 00000040 680A            LDR              R2, [R1]
  123 00000042         
  124 00000042 1A12            SUBS             R2, R2, R0
  125 00000044         
  126 00000044 4B19            LDR              R3, =ADDR_7_SEG_BIN_DS3_0
  127 00000046 601A            STR              R2, [R3]
  128 00000048         
  129 00000048 3A00            SUBS             R2, #0x00
  130 0000004A DA08            BGE              set_lcd_blue ; When R2 >= 0x00 
                                                            then go to set_lcd_
                                                            blue
  131 0000004C DB0E            BLT              set_lcd_red ; When R2 < 0x00 th
                                                            en go to set_lcd_re
                                                            d
  132 0000004E E7DB            B                main_loop
  133 00000050         
  134 00000050         ; Because the LCD needs to get RGB color-coding we set t
                       he values like so.
  135 00000050         ; https://ennis.zhaw.ch/wiki/doku.php?id=ctboard:periphe
                       rals:lcd_bg
  136 00000050         set_lcd_green
  137 00000050 4817            LDR              R0, =ADDR_LCD_COLOUR
  138 00000052 4918            LDR              R1, =0x0000
  139 00000054 4A18            LDR              R2, =0xFFFF
  140 00000056 8001            STRH             R1, [R0, #DISPLAY_COLOUR_RED]
  141 00000058 8042            STRH             R2, [R0, #DISPLAY_COLOUR_GREEN]
  142 0000005A 8081            STRH             R1, [R0, #DISPLAY_COLOUR_BLUE]
  143 0000005C E7D4            B                main_loop
  144 0000005E         set_lcd_blue
  145 0000005E 4814            LDR              R0, =ADDR_LCD_COLOUR
  146 00000060 4914            LDR              R1, =0x0000
  147 00000062 4A15            LDR              R2, =0xFFFF
  148 00000064 8001            STRH             R1, [R0, #DISPLAY_COLOUR_RED]
  149 00000066 8041            STRH             R1, [R0, #DISPLAY_COLOUR_GREEN]
  150 00000068 8082            STRH             R2, [R0, #DISPLAY_COLOUR_BLUE]
  151 0000006A E7CD            B                main_loop
  152 0000006C         set_lcd_red
  153 0000006C 4810            LDR              R0, =ADDR_LCD_COLOUR
  154 0000006E 4911            LDR              R1, =0x0000
  155 00000070 4A11            LDR              R2, =0xFFFF
  156 00000072 8002            STRH             R2, [R0, #DISPLAY_COLOUR_RED]
  157 00000074 8041            STRH             R1, [R0, #DISPLAY_COLOUR_GREEN]



ARM Macro Assembler    Page 5 


  158 00000076 8081            STRH             R1, [R0, #DISPLAY_COLOUR_BLUE]
  159 00000078 E7C6            B                main_loop
  160 0000007A         
  161 0000007A         
  162 0000007A         clear_lcd
  163 0000007A B407            PUSH             {R0, R1, R2}
  164 0000007C 4A0D            LDR              R2, =0x0
  165 0000007E         clear_lcd_loop
  166 0000007E 480F            LDR              R0, =ADDR_LCD_ASCII
  167 00000080 1880            ADDS             R0, R0, R2  ; add index to lcd 
                                                            offset
  168 00000082 490C            LDR              R1, =ASCII_DIGIT_CLEAR
  169 00000084 6001            STR              R1, [R0]
  170 00000086 1D12            ADDS             R2, R2, #4  ; increas index by 
                                                            4 (word step)
  171 00000088 2A28            CMP              R2, #LCD_LAST_OFFSET ; until in
                                                            dex reached last lc
                                                            d point
  172 0000008A D4F8            BMI              clear_lcd_loop
  173 0000008C BC07            POP              {R0, R1, R2}
  174 0000008E 4770            BX               LR
  175 00000090         
  176 00000090         write_bit_ascii
  177 00000090 B403            PUSH             {R0, R1}
  178 00000092 480B            LDR              R0, =ADDR_LCD_ASCII_BIT_POS
  179 00000094 490B            LDR              R1, =DISPLAY_BIT
  180 00000096 6809            LDR              R1, [R1]
  181 00000098 6001            STR              R1, [R0]
  182 0000009A BC03            POP              {R0, R1}
  183 0000009C 4770            BX               LR
  184 0000009E         
  185 0000009E                 ENDP
  186 0000009E 00 00           ALIGN
  187 000000A0         
  188 000000A0         
  189 000000A0         ; ------------------------------------------------------
                       ------------
  190 000000A0         ; End of code
  191 000000A0         ; ------------------------------------------------------
                       ------------
  192 000000A0                 END
              60000210 
              60000100 
              60000200 
              60000114 
              60000340 
              00000000 
              0000FFFF 
              60000300 
              60000302 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --apcs=interw
ork --depend=.\build\struct_code.d -o.\build\struct_code.o -I.\RTE\_Target_1 -I
"C:\Users\Luca Archidiacono\AppData\Local\Arm\Packs\InES\CTBoard14_DFP\4.0.2\De
vice\Include" -I"C:\Users\Luca Archidiacono\AppData\Local\Arm\Packs\InES\CTBoar
d14_DFP\4.0.2\Device\Include\m0" -I"C:\Users\Luca Archidiacono\AppData\Local\Ar
m\Packs\InES\CTBoard14_DFP\4.0.2\HAL\Include" --predefine="__EVAL SETA 1" --pre
define="__UVISION_VERSION SETA 536" --predefine="_RTE_ SETA 1" --predefine="_RT
E_ SETA 1" --list=.\build\struct_code.lst app\struct_code.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DISPLAY_2_BIT 00000004

Symbol: DISPLAY_2_BIT
   Definitions
      At line 59 in file app\struct_code.s
   Uses
      None
Comment: DISPLAY_2_BIT unused
DISPLAY_4_BIT 00000005

Symbol: DISPLAY_4_BIT
   Definitions
      At line 60 in file app\struct_code.s
   Uses
      None
Comment: DISPLAY_4_BIT unused
DISPLAY_8_BIT 00000006

Symbol: DISPLAY_8_BIT
   Definitions
      At line 61 in file app\struct_code.s
   Uses
      None
Comment: DISPLAY_8_BIT unused
DISPLAY_BIT 00000000

Symbol: DISPLAY_BIT
   Definitions
      At line 58 in file app\struct_code.s
   Uses
      At line 179 in file app\struct_code.s
Comment: DISPLAY_BIT used once
myConstants 00000000

Symbol: myConstants
   Definitions
      At line 56 in file app\struct_code.s
   Uses
      None
Comment: myConstants unused
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

clear_lcd 0000007A

Symbol: clear_lcd
   Definitions
      At line 162 in file app\struct_code.s
   Uses
      At line 78 in file app\struct_code.s
Comment: clear_lcd used once
clear_lcd_loop 0000007E

Symbol: clear_lcd_loop
   Definitions
      At line 165 in file app\struct_code.s
   Uses
      At line 172 in file app\struct_code.s
Comment: clear_lcd_loop used once
counter_loop 0000001E

Symbol: counter_loop
   Definitions
      At line 97 in file app\struct_code.s
   Uses
      At line 103 in file app\struct_code.s
Comment: counter_loop used once
main 00000000

Symbol: main
   Definitions
      At line 74 in file app\struct_code.s
   Uses
      At line 75 in file app\struct_code.s
Comment: main used once
main_loop 00000008

Symbol: main_loop
   Definitions
      At line 80 in file app\struct_code.s
   Uses
      At line 89 in file app\struct_code.s
      At line 109 in file app\struct_code.s
      At line 132 in file app\struct_code.s
      At line 143 in file app\struct_code.s
      At line 151 in file app\struct_code.s
      At line 159 in file app\struct_code.s

myCode 00000000

Symbol: myCode
   Definitions
      At line 67 in file app\struct_code.s
   Uses
      None
Comment: myCode unused
set_lcd_blue 0000005E

Symbol: set_lcd_blue
   Definitions
      At line 144 in file app\struct_code.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 130 in file app\struct_code.s
Comment: set_lcd_blue used once
set_lcd_green 00000050

Symbol: set_lcd_green
   Definitions
      At line 136 in file app\struct_code.s
   Uses
      At line 108 in file app\struct_code.s
Comment: set_lcd_green used once
set_lcd_red 0000006C

Symbol: set_lcd_red
   Definitions
      At line 152 in file app\struct_code.s
   Uses
      At line 131 in file app\struct_code.s
Comment: set_lcd_red used once
t0_not_pressed 00000030

Symbol: t0_not_pressed
   Definitions
      At line 111 in file app\struct_code.s
   Uses
      At line 87 in file app\struct_code.s
Comment: t0_not_pressed used once
t0_pressed 00000014

Symbol: t0_pressed
   Definitions
      At line 91 in file app\struct_code.s
   Uses
      At line 86 in file app\struct_code.s
Comment: t0_pressed used once
write_bit_ascii 00000090

Symbol: write_bit_ascii
   Definitions
      At line 176 in file app\struct_code.s
   Uses
      None
Comment: write_bit_ascii unused
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ADDR_7_SEG_BIN_DS3_0 60000114

Symbol: ADDR_7_SEG_BIN_DS3_0
   Definitions
      At line 29 in file app\struct_code.s
   Uses
      At line 126 in file app\struct_code.s
Comment: ADDR_7_SEG_BIN_DS3_0 used once
ADDR_BUTTONS 60000210

Symbol: ADDR_BUTTONS
   Definitions
      At line 25 in file app\struct_code.s
   Uses
      At line 82 in file app\struct_code.s
Comment: ADDR_BUTTONS used once
ADDR_DIP_SWITCH_7_0 60000200

Symbol: ADDR_DIP_SWITCH_7_0
   Definitions
      At line 24 in file app\struct_code.s
   Uses
      At line 121 in file app\struct_code.s
Comment: ADDR_DIP_SWITCH_7_0 used once
ADDR_LCD_ASCII 60000300

Symbol: ADDR_LCD_ASCII
   Definitions
      At line 31 in file app\struct_code.s
   Uses
      At line 166 in file app\struct_code.s
Comment: ADDR_LCD_ASCII used once
ADDR_LCD_ASCII_2ND_LINE 60000314

Symbol: ADDR_LCD_ASCII_2ND_LINE
   Definitions
      At line 33 in file app\struct_code.s
   Uses
      None
Comment: ADDR_LCD_ASCII_2ND_LINE unused
ADDR_LCD_ASCII_BIT_POS 60000302

Symbol: ADDR_LCD_ASCII_BIT_POS
   Definitions
      At line 32 in file app\struct_code.s
   Uses
      At line 178 in file app\struct_code.s
Comment: ADDR_LCD_ASCII_BIT_POS used once
ADDR_LCD_COLOUR 60000340

Symbol: ADDR_LCD_COLOUR
   Definitions
      At line 30 in file app\struct_code.s
   Uses
      At line 137 in file app\struct_code.s
      At line 145 in file app\struct_code.s
      At line 153 in file app\struct_code.s

ADDR_LED_31_0 60000100



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: ADDR_LED_31_0
   Definitions
      At line 28 in file app\struct_code.s
   Uses
      At line 105 in file app\struct_code.s
      At line 117 in file app\struct_code.s

ASCII_DIGIT_CLEAR 00000000

Symbol: ASCII_DIGIT_CLEAR
   Definitions
      At line 40 in file app\struct_code.s
   Uses
      At line 168 in file app\struct_code.s
Comment: ASCII_DIGIT_CLEAR used once
ASCII_DIGIT_OFFSET 00000030

Symbol: ASCII_DIGIT_OFFSET
   Definitions
      At line 44 in file app\struct_code.s
   Uses
      None
Comment: ASCII_DIGIT_OFFSET unused
BUTTON_PRESSED 00000001

Symbol: BUTTON_PRESSED
   Definitions
      At line 52 in file app\struct_code.s
   Uses
      None
Comment: BUTTON_PRESSED unused
DISPLAY_COLOUR_BLUE 00000004

Symbol: DISPLAY_COLOUR_BLUE
   Definitions
      At line 49 in file app\struct_code.s
   Uses
      At line 142 in file app\struct_code.s
      At line 150 in file app\struct_code.s
      At line 158 in file app\struct_code.s

DISPLAY_COLOUR_GREEN 00000002

Symbol: DISPLAY_COLOUR_GREEN
   Definitions
      At line 48 in file app\struct_code.s
   Uses
      At line 141 in file app\struct_code.s
      At line 149 in file app\struct_code.s
      At line 157 in file app\struct_code.s

DISPLAY_COLOUR_RED 00000000

Symbol: DISPLAY_COLOUR_RED
   Definitions
      At line 47 in file app\struct_code.s
   Uses
      At line 140 in file app\struct_code.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 148 in file app\struct_code.s
      At line 156 in file app\struct_code.s

LCD_LAST_OFFSET 00000028

Symbol: LCD_LAST_OFFSET
   Definitions
      At line 41 in file app\struct_code.s
   Uses
      At line 171 in file app\struct_code.s
Comment: LCD_LAST_OFFSET used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

adc_get_value 00000000

Symbol: adc_get_value
   Definitions
      At line 72 in file app\struct_code.s
   Uses
      At line 92 in file app\struct_code.s
      At line 112 in file app\struct_code.s

adc_init 00000000

Symbol: adc_init
   Definitions
      At line 71 in file app\struct_code.s
   Uses
      At line 77 in file app\struct_code.s
Comment: adc_init used once
2 symbols
369 symbols in table
