


ARM Macro Assembler    Page 1 


    1 00000000         ;* -----------------------------------------------------
                       -------------
    2 00000000         ;* --  _____       ______  _____                        
                                   -
    3 00000000         ;* -- |_   _|     |  ____|/ ____|                       
                                   -
    4 00000000         ;* --   | |  _ __ | |__  | (___    Institute of Embedded
                        Systems    -
    5 00000000         ;* --   | | | '_ \|  __|  \___ \   Zurich University of 
                                   -
    6 00000000         ;* --  _| |_| | | | |____ ____) |  Applied Sciences     
                                   -
    7 00000000         ;* -- |_____|_| |_|______|_____/   8401 Winterthur, Swit
                       zerland     -
    8 00000000         ;* -----------------------------------------------------
                       -------------
    9 00000000         ;* --
   10 00000000         ;* -- Project     : CT1 - Lab 7
   11 00000000         ;* -- Description : Control structures
   12 00000000         ;* -- 
   13 00000000         ;* -- $Id: main.s 3748 2016-10-31 13:26:44Z kesr $
   14 00000000         ;* -----------------------------------------------------
                       -------------
   15 00000000         
   16 00000000         
   17 00000000         ; ------------------------------------------------------
                       -------------
   18 00000000         ; -- Constants
   19 00000000         ; ------------------------------------------------------
                       -------------
   20 00000000         
   21 00000000                 AREA             myCode, CODE, READONLY
   22 00000000         
   23 00000000                 THUMB
   24 00000000         
   25 00000000 60000100 
                       ADDR_LED_15_0
                               EQU              0x60000100
   26 00000000 60000102 
                       ADDR_LED_31_16
                               EQU              0x60000102
   27 00000000 60000114 
                       ADDR_7_SEG_BIN_DS1_0
                               EQU              0x60000114
   28 00000000 60000200 
                       ADDR_DIP_SWITCH_15_0
                               EQU              0x60000200
   29 00000000 60000211 
                       ADDR_HEX_SWITCH
                               EQU              0x60000211
   30 00000000         
   31 00000000 0000000B 
                       NR_CASES
                               EQU              0xB
   32 00000000 0000FF00 
                       UPPER_BIT_MASK
                               EQU              0xFF00
   33 00000000 000000FF 
                       LOWER_BIT_MASK



ARM Macro Assembler    Page 2 


                               EQU              0x00FF
   34 00000000 0000000F 
                       OPERATION_BIT_MASK
                               EQU              0x000F
   35 00000000         
   36 00000000         jump_table                           ; ordered table con
                                                            taining the labels 
                                                            of all cases
   37 00000000         ; STUDENTS: To be programmed 
   38 00000000 00000000        DCD              case_dark
   39 00000004 00000000        DCD              case_add
   40 00000008 00000000        DCD              case_subtract
   41 0000000C 00000000        DCD              case_multiply
   42 00000010 00000000        DCD              case_and
   43 00000014 00000000        DCD              case_or
   44 00000018 00000000        DCD              case_xor
   45 0000001C 00000000        DCD              case_not
   46 00000020 00000000        DCD              case_nand
   47 00000024 00000000        DCD              case_nor
   48 00000028 00000000        DCD              case_xnor
   49 0000002C         ; END: To be programmed
   50 0000002C         
   51 0000002C         
   52 0000002C         ; ------------------------------------------------------
                       -------------
   53 0000002C         ; -- Main
   54 0000002C         ; ------------------------------------------------------
                       -------------   
   55 0000002C         
   56 0000002C         main    PROC
   57 0000002C                 EXPORT           main
   58 0000002C         
   59 0000002C         read_dipsw                           ; Read operands int
                                                            o R0 and R1 and dis
                                                            play on LEDs
   60 0000002C         ; STUDENTS: To be programmed
   61 0000002C 4A19            LDR              R2, =ADDR_DIP_SWITCH_15_0
   62 0000002E 6810            LDR              R0, [R2]
   63 00000030 6811            LDR              R1, [R2]
   64 00000032         
   65 00000032 4A19            LDR              R2, =ADDR_LED_15_0
   66 00000034 6010            STR              R0, [R2]
   67 00000036         
   68 00000036 4B19            LDR              R3, =UPPER_BIT_MASK
   69 00000038 4018            ANDS             R0, R0, R3
   70 0000003A 0A00            LSRS             R0, R0, #8  ; 8 bit shifting to
                                                             the right so we ca
                                                            n use it for the op
                                                            eration with the ot
                                                            her operand R1
   71 0000003C 4B18            LDR              R3, =LOWER_BIT_MASK
   72 0000003E 4019            ANDS             R1, R1, R3
   73 00000040         
   74 00000040         ; END: To be programmed
   75 00000040         
   76 00000040         read_hexsw                           ; Read operation in
                                                            to R2 and display o
                                                            n 7seg.
   77 00000040         ; STUDENTS: To be programmed



ARM Macro Assembler    Page 3 


   78 00000040 4B18            LDR              R3, =ADDR_HEX_SWITCH
   79 00000042 781B            LDRB             R3, [R3, #0]
   80 00000044 4F18            LDR              R7, =OPERATION_BIT_MASK ; Becau
                                                            se register bits [7
                                                            :4] are read as '1'
                                                             and therefore need
                                                             to be masked.
   81 00000046 403B            ANDS             R3, R3, R7  ; Apply bitmask to 
                                                            remove unexpected v
                                                            alues on upper bits
                                                            
   82 00000048         
   83 00000048 4C18            LDR              R4, =ADDR_7_SEG_BIN_DS1_0
   84 0000004A 7023            STRB             R3, [R4]
   85 0000004C         
   86 0000004C         ; END: To be programmed
   87 0000004C         
   88 0000004C         case_switch                          ; Implement switch 
                                                            statement as shown 
                                                            on lecture slide
   89 0000004C         ; STUDENTS: To be programmed
   90 0000004C         
   91 0000004C 2B0B            CMP              R3, #NR_CASES ; Compare hex swi
                                                            tch value to cases
   92 0000004E D21C            BHS              case_default ; When "higher or 
                                                            same" then go insid
                                                            e "case_default"
   93 00000050         
   94 00000050 009B            LSLS             R3, #2      ; Multiply (via bit
                                                            shift) R2 to accoun
                                                            t for jump table it
                                                            em size to get the 
                                                            correct offset size
                                                            
   95 00000052 4F17            LDR              R7, =jump_table ; Load address 
                                                            of jump table
   96 00000054 58FF            LDR              R7, [R7, R3] ; Get value from j
                                                            ump table by using 
                                                            the calculated offs
                                                            et
   97 00000056 4738            BX               R7          ; Go to case define
                                                            d in jump table at 
                                                            the index R7
   98 00000058         
   99 00000058         ; END: To be programmed
  100 00000058         
  101 00000058         
  102 00000058         ; Add the code for the individual cases below
  103 00000058         ; - operand 1 in R0
  104 00000058         ; - operand 2 in R1
  105 00000058         ; - result in R0
  106 00000058         
  107 00000058         case_dark
  108 00000058 4816            LDR              R0, =0
  109 0000005A E018            B                display_result
  110 0000005C         
  111 0000005C         case_add
  112 0000005C 1840            ADDS             R0, R0, R1
  113 0000005E E016            B                display_result



ARM Macro Assembler    Page 4 


  114 00000060         
  115 00000060         ; STUDENTS: To be programmed
  116 00000060         
  117 00000060         case_subtract
  118 00000060 1A40            SUBS             R0, R0, R1  ; Apply subtraction
                                                             operation to opera
                                                            nd 1 & 2
  119 00000062 E014            B                display_result
  120 00000064         
  121 00000064         case_multiply
  122 00000064 4348            MULS             R0, R1, R0  ; Apply multiplz op
                                                            eration to operand 
                                                            1 & 2
  123 00000066 E012            B                display_result
  124 00000068         
  125 00000068         case_and
  126 00000068 4008            ANDS             R0, R0, R1  ; Apply and operati
                                                            on to operand 1 & 2
                                                            
  127 0000006A E010            B                display_result
  128 0000006C         
  129 0000006C         case_or
  130 0000006C 4308            ORRS             R0, R0, R1  ; Apply or operatio
                                                            n to operand 1 & 2
  131 0000006E E00E            B                display_result
  132 00000070         
  133 00000070         case_xor
  134 00000070 4048            EORS             R0, R0, R1  ; Apply xor operati
                                                            on to operand 1 & 2
                                                            
  135 00000072 E00C            B                display_result
  136 00000074         
  137 00000074         case_not
  138 00000074 43C0            MVNS             R0, R0      ; Apply not operati
                                                            on to operand 1
  139 00000076 E00A            B                display_result
  140 00000078         
  141 00000078         case_nand
  142 00000078 4008            ANDS             R0, R0, R1  ; Apply and operati
                                                            on to operand 1 & 2
                                                            
  143 0000007A 43C0            MVNS             R0, R0      ; Apply not operati
                                                            on to result
  144 0000007C E007            B                display_result
  145 0000007E         
  146 0000007E         case_nor
  147 0000007E 4308            ORRS             R0, R0, R1  ; Apply or operatio
                                                            n to operand 1 & 2
  148 00000080 43C0            MVNS             R0, R0      ; Apply not operati
                                                            on to result
  149 00000082 E004            B                display_result
  150 00000084         
  151 00000084         case_xnor
  152 00000084 4048            EORS             R0, R0, R1  ; Apply xor operati
                                                            on to operand 1 & 2
                                                            
  153 00000086 43C0            MVNS             R0, R0      ; Apply not operati
                                                            on to result
  154 00000088 E001            B                display_result



ARM Macro Assembler    Page 5 


  155 0000008A         
  156 0000008A         case_default
  157 0000008A 480B            LDR              R0, =0xFFFF ; Set result to 0xF
                                                            FFF to turn on all 
                                                            leds
  158 0000008C E7FF            B                display_result
  159 0000008E         
  160 0000008E         
  161 0000008E         ; END: To be programmed
  162 0000008E         
  163 0000008E         
  164 0000008E         display_result                       ; Display result on
                                                             LEDs
  165 0000008E         ; STUDENTS: To be programmed
  166 0000008E         
  167 0000008E 4F0B            LDR              R7, =ADDR_LED_31_16 ; Load addr
                                                            ess of led 31-16
  168 00000090 6038            STR              R0, [R7]    ; Store result in a
                                                            ddress of leds 31-1
                                                            6
  169 00000092         
  170 00000092         ; END: To be programmed
  171 00000092         
  172 00000092 E7CB            B                read_dipsw
  173 00000094         
  174 00000094                 ALIGN
  175 00000094                 ENDP
  176 00000094         
  177 00000094         ; ------------------------------------------------------
                       -------------
  178 00000094         ; -- End of file
  179 00000094         ; ------------------------------------------------------
                       -------------                      
  180 00000094                 END
              60000200 
              60000100 
              0000FF00 
              000000FF 
              60000211 
              0000000F 
              60000114 
              00000000 
              00000000 
              0000FFFF 
              60000102 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --apcs=interw
ork --depend=.\build\main.d -o.\build\main.o -I.\RTE\_Target_1 -I"C:\Users\Luca
 Archidiacono\AppData\Local\Arm\Packs\InES\CTBoard14_DFP\4.0.2\Device\Include" 
-I"C:\Users\Luca Archidiacono\AppData\Local\Arm\Packs\InES\CTBoard14_DFP\4.0.2\
Device\Include\m0" -I"C:\Users\Luca Archidiacono\AppData\Local\Arm\Packs\InES\C
TBoard14_DFP\4.0.2\HAL\Include" --predefine="__EVAL SETA 1" --predefine="__UVIS
ION_VERSION SETA 536" --predefine="_RTE_ SETA 1" --predefine="_RTE_ SETA 1" --l
ist=.\build\main.lst app\main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

case_add 0000005C

Symbol: case_add
   Definitions
      At line 111 in file app\main.s
   Uses
      At line 39 in file app\main.s
Comment: case_add used once
case_and 00000068

Symbol: case_and
   Definitions
      At line 125 in file app\main.s
   Uses
      At line 42 in file app\main.s
Comment: case_and used once
case_dark 00000058

Symbol: case_dark
   Definitions
      At line 107 in file app\main.s
   Uses
      At line 38 in file app\main.s
Comment: case_dark used once
case_default 0000008A

Symbol: case_default
   Definitions
      At line 156 in file app\main.s
   Uses
      At line 92 in file app\main.s
Comment: case_default used once
case_multiply 00000064

Symbol: case_multiply
   Definitions
      At line 121 in file app\main.s
   Uses
      At line 41 in file app\main.s
Comment: case_multiply used once
case_nand 00000078

Symbol: case_nand
   Definitions
      At line 141 in file app\main.s
   Uses
      At line 46 in file app\main.s
Comment: case_nand used once
case_nor 0000007E

Symbol: case_nor
   Definitions
      At line 146 in file app\main.s
   Uses
      At line 47 in file app\main.s
Comment: case_nor used once
case_not 00000074

Symbol: case_not



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 137 in file app\main.s
   Uses
      At line 45 in file app\main.s
Comment: case_not used once
case_or 0000006C

Symbol: case_or
   Definitions
      At line 129 in file app\main.s
   Uses
      At line 43 in file app\main.s
Comment: case_or used once
case_subtract 00000060

Symbol: case_subtract
   Definitions
      At line 117 in file app\main.s
   Uses
      At line 40 in file app\main.s
Comment: case_subtract used once
case_switch 0000004C

Symbol: case_switch
   Definitions
      At line 88 in file app\main.s
   Uses
      None
Comment: case_switch unused
case_xnor 00000084

Symbol: case_xnor
   Definitions
      At line 151 in file app\main.s
   Uses
      At line 48 in file app\main.s
Comment: case_xnor used once
case_xor 00000070

Symbol: case_xor
   Definitions
      At line 133 in file app\main.s
   Uses
      At line 44 in file app\main.s
Comment: case_xor used once
display_result 0000008E

Symbol: display_result
   Definitions
      At line 164 in file app\main.s
   Uses
      At line 109 in file app\main.s
      At line 113 in file app\main.s
      At line 119 in file app\main.s
      At line 123 in file app\main.s
      At line 127 in file app\main.s
      At line 131 in file app\main.s
      At line 135 in file app\main.s
      At line 139 in file app\main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 144 in file app\main.s
      At line 149 in file app\main.s
      At line 154 in file app\main.s
      At line 158 in file app\main.s

jump_table 00000000

Symbol: jump_table
   Definitions
      At line 36 in file app\main.s
   Uses
      At line 95 in file app\main.s
Comment: jump_table used once
main 0000002C

Symbol: main
   Definitions
      At line 56 in file app\main.s
   Uses
      At line 57 in file app\main.s
Comment: main used once
myCode 00000000

Symbol: myCode
   Definitions
      At line 21 in file app\main.s
   Uses
      None
Comment: myCode unused
read_dipsw 0000002C

Symbol: read_dipsw
   Definitions
      At line 59 in file app\main.s
   Uses
      At line 172 in file app\main.s
Comment: read_dipsw used once
read_hexsw 00000040

Symbol: read_hexsw
   Definitions
      At line 76 in file app\main.s
   Uses
      None
Comment: read_hexsw unused
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ADDR_7_SEG_BIN_DS1_0 60000114

Symbol: ADDR_7_SEG_BIN_DS1_0
   Definitions
      At line 27 in file app\main.s
   Uses
      At line 83 in file app\main.s
Comment: ADDR_7_SEG_BIN_DS1_0 used once
ADDR_DIP_SWITCH_15_0 60000200

Symbol: ADDR_DIP_SWITCH_15_0
   Definitions
      At line 28 in file app\main.s
   Uses
      At line 61 in file app\main.s
Comment: ADDR_DIP_SWITCH_15_0 used once
ADDR_HEX_SWITCH 60000211

Symbol: ADDR_HEX_SWITCH
   Definitions
      At line 29 in file app\main.s
   Uses
      At line 78 in file app\main.s
Comment: ADDR_HEX_SWITCH used once
ADDR_LED_15_0 60000100

Symbol: ADDR_LED_15_0
   Definitions
      At line 25 in file app\main.s
   Uses
      At line 65 in file app\main.s
Comment: ADDR_LED_15_0 used once
ADDR_LED_31_16 60000102

Symbol: ADDR_LED_31_16
   Definitions
      At line 26 in file app\main.s
   Uses
      At line 167 in file app\main.s
Comment: ADDR_LED_31_16 used once
LOWER_BIT_MASK 000000FF

Symbol: LOWER_BIT_MASK
   Definitions
      At line 33 in file app\main.s
   Uses
      At line 71 in file app\main.s
Comment: LOWER_BIT_MASK used once
NR_CASES 0000000B

Symbol: NR_CASES
   Definitions
      At line 31 in file app\main.s
   Uses
      At line 91 in file app\main.s
Comment: NR_CASES used once
OPERATION_BIT_MASK 0000000F

Symbol: OPERATION_BIT_MASK



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 34 in file app\main.s
   Uses
      At line 80 in file app\main.s
Comment: OPERATION_BIT_MASK used once
UPPER_BIT_MASK 0000FF00

Symbol: UPPER_BIT_MASK
   Definitions
      At line 32 in file app\main.s
   Uses
      At line 68 in file app\main.s
Comment: UPPER_BIT_MASK used once
9 symbols
363 symbols in table
