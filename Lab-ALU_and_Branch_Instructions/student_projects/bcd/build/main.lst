


ARM Macro Assembler    Page 1 


    1 00000000         ; ------------------------------------------------------
                       ------------
    2 00000000         ; --  _____       ______  _____                         
                                  -
    3 00000000         ; -- |_   _|     |  ____|/ ____|                        
                                  -
    4 00000000         ; --   | |  _ __ | |__  | (___    Institute of Embedded 
                       Systems    -
    5 00000000         ; --   | | | '_ \|  __|  \___ \   Zurich University of  
                                  -
    6 00000000         ; --  _| |_| | | | |____ ____) |  Applied Sciences      
                                  -
    7 00000000         ; -- |_____|_| |_|______|_____/   8401 Winterthur, Switz
                       erland     -
    8 00000000         ; ------------------------------------------------------
                       ------------
    9 00000000         ; --
   10 00000000         ; -- main.s
   11 00000000         ; --
   12 00000000         ; -- CT1 P06 "ALU und Sprungbefehle" mit MUL
   13 00000000         ; --
   14 00000000         ; -- $Id: main.s 4857 2019-09-10 17:30:17Z akdi $
   15 00000000         ; ------------------------------------------------------
                       ------------
   16 00000000         ;Directives
   17 00000000                 PRESERVE8
   18 00000000                 THUMB
   19 00000000         
   20 00000000         ; ------------------------------------------------------
                       ------------
   21 00000000         ; -- Address Defines
   22 00000000         ; ------------------------------------------------------
                       ------------
   23 00000000         
   24 00000000 60000100 
                       ADDR_LED_15_0
                               EQU              0x60000100
   25 00000000 60000102 
                       ADDR_LED_31_16
                               EQU              0x60000102
   26 00000000 60000200 
                       ADDR_DIP_SWITCH_7_0
                               EQU              0x60000200
   27 00000000 60000201 
                       ADDR_DIP_SWITCH_15_8
                               EQU              0x60000201
   28 00000000 60000114 
                       ADDR_7_SEG_BIN_DS3_0
                               EQU              0x60000114
   29 00000000 60000210 
                       ADDR_BUTTONS
                               EQU              0x60000210
   30 00000000         
   31 00000000 60000340 
                       ADDR_LCD_RED
                               EQU              0x60000340
   32 00000000 60000342 
                       ADDR_LCD_GREEN
                               EQU              0x60000342



ARM Macro Assembler    Page 2 


   33 00000000 60000344 
                       ADDR_LCD_BLUE
                               EQU              0x60000344
   34 00000000 0000FFFF 
                       LCD_BACKLIGHT_FULL
                               EQU              0xffff
   35 00000000 00000000 
                       LCD_BACKLIGHT_OFF
                               EQU              0x0000
   36 00000000         
   37 00000000 00000001 
                       BUTTON_MASK
                               EQU              0x01
   38 00000000 0000000F 
                       BCD_MASK
                               EQU              0x0F
   39 00000000 0000000A 
                       HEX_TEN EQU              0xA
   40 00000000         
   41 00000000         ; ------------------------------------------------------
                       ------------
   42 00000000         ; -- myCode
   43 00000000         ; ------------------------------------------------------
                       ------------
   44 00000000                 AREA             myCode, CODE, READONLY
   45 00000000         
   46 00000000                 ENTRY
   47 00000000         
   48 00000000         main    PROC
   49 00000000                 export           main
   50 00000000         
   51 00000000         ; STUDENTS: To be programmed
   52 00000000         
   53 00000000 4E20            LDR              R6, =BUTTON_MASK
   54 00000002 4F21            LDR              R7, =BCD_MASK
   55 00000004         
   56 00000004         ; Load values from the dip switches, mask them with 0x00
                       001111, then shift the SWITCH_15_8 and finally add them 
                       together.
   57 00000004 4821            LDR              R0, =ADDR_DIP_SWITCH_7_0
   58 00000006 7800            LDRB             R0, [R0]    ; BCD Ones
   59 00000008 4038            ANDS             R0, R0, R7
   60 0000000A         
   61 0000000A 4921            LDR              R1, =ADDR_DIP_SWITCH_15_8
   62 0000000C 7809            LDRB             R1, [R1]    ; BCD Tens
   63 0000000E 4039            ANDS             R1, R1, R7
   64 00000010         
   65 00000010 010A            LSLS             R2, R1, #4  ; Left shift tens-v
                                                            alue to make space 
                                                            for ones-value
   66 00000012 1812            ADDS             R2, R2, R0  ; Store result of (
                                                            tens + ones) values
                                                             in R2. R2 will be 
                                                            later used to show 
                                                            in LED_7_0 and DS_1
                                                            _0
   67 00000014         
   68 00000014         ; Check for the pressed button T0
   69 00000014 4F1F            LDR              R7, =ADDR_BUTTONS



ARM Macro Assembler    Page 3 


   70 00000016 783F            LDRB             R7, [R7]
   71 00000018 4237            TST              R7, R6      ; Test if P0 was pr
                                                            essed or not
   72 0000001A         
   73 0000001A         ; If Button T0 was pressed set background and go to shif
                       t_add branch.
   74 0000001A 4E1F            LDR              R6, =ADDR_LCD_BLUE
   75 0000001C 4F1F            LDR              R7, =ADDR_LCD_RED
   76 0000001E D107            BNE              shift_add   ; Branch if Z-Flag 
                                                            is == 0
   77 00000020         
   78 00000020         multiply
   79 00000020 4B1F            LDR              R3, =HEX_TEN
   80 00000022 4359            MULS             R1, R3, R1  ; Multiply 0xA (10)
                                                             with R1 (to get bi
                                                            nary values) and st
                                                            ore in R1
   81 00000024 180D            ADDS             R5, R1, R0  ; Store result of R
                                                            1 + R0 in R5. R5 wi
                                                            ll be later used to
                                                             show in LED_15_8 a
                                                            nd DS_3_2
   82 00000026         
   83 00000026         ; Set LCD Background color to blue
   84 00000026 4B1F            LDR              R3, =LCD_BACKLIGHT_FULL
   85 00000028 8033            STRH             R3, [R6]    ; Pass to LCD_Blue 
                                                            register the addres
                                                            s of LCD_BACKLIGHT_
                                                            FULL -> enable BLUE
                                                            
   86 0000002A 4C1F            LDR              R4, =LCD_BACKLIGHT_OFF ; Pass t
                                                            o LCD_Red register 
                                                            the address of LCD_
                                                            BACKLIGHT_OFF -> di
                                                            sable RED
   87 0000002C 803C            STRH             R4, [R7]
   88 0000002E         
   89 0000002E E007            B                end_branch
   90 00000030         
   91 00000030         shift_add
   92 00000030         ; Shift and add to make BCD 10s and add BCD values for b
                       inary value
   93 00000030 004D            LSLS             R5, R1, #1  ; R1 * 2^1 = R1 * 2
                                                            
   94 00000032 00CC            LSLS             R4, R1, #3  ; R1 * 2^3 = R1 * 8
                                                            
   95 00000034 192D            ADDS             R5, R5, R4  ; (R1*2) + (R1*8) =
                                                             R1*10
   96 00000036         
   97 00000036 182D            ADDS             R5, R5, R0  ; Store result of R
                                                            5 + R0 in R5. R5 wi
                                                            ll be later used to
                                                             show in LED_15_8 a
                                                            nd DS_3_2
   98 00000038         
   99 00000038         ; Set LCD Background color to red
  100 00000038 4B1B            LDR              R3, =LCD_BACKLIGHT_OFF ; Pass t
                                                            o LCD_Blue register
                                                             the address of LCD



ARM Macro Assembler    Page 4 


                                                            _BACKLIGHT_OFF -> e
                                                            nable BLUE
  101 0000003A 8033            STRH             R3, [R6]
  102 0000003C 4C19            LDR              R4, =LCD_BACKLIGHT_FULL ; Pass 
                                                            to LCD_Red register
                                                             the address of LCD
                                                            _BACKLIGHT_FULL -> 
                                                            enable RED
  103 0000003E 803C            STRH             R4, [R7]
  104 00000040         
  105 00000040         end_branch
  106 00000040         ; Show BCD
  107 00000040 491A            LDR              R1, =ADDR_7_SEG_BIN_DS3_0
  108 00000042 700A            STRB             R2, [R1]    ; Display value of 
                                                            R2 on 7-seg display
                                                             R1 (DS1, DS0)
  109 00000044 704D            STRB             R5, [R1, #1] ; Display value of
                                                             R5 on 7-seg displa
                                                            y R1 with offset (D
                                                            S3, DS2)
  110 00000046         
  111 00000046 491A            LDR              R1, =ADDR_LED_15_0
  112 00000048 700A            STRB             R2, [R1]    ; Display value of 
                                                            R2 in LED_7_0
  113 0000004A 704D            STRB             R5, [R1, #1] ; Display value of
                                                             R5 in LED_15_8
  114 0000004C         
  115 0000004C         
  116 0000004C         ; initialise width of rotation bar before do-while loop
  117 0000004C 2000            MOVS             R0, #0      ; 0000 0000 -> will
                                                             be used to count t
                                                            he 1's in R5. After
                                                             every shift to the
                                                             right and carry = 
                                                            1 this R0 will get 
                                                            +1 on the far right
                                                             side.
  118 0000004E 2107            MOVS             R1, #7      ; 0000 0111 == 7 ->
                                                             is the counter whi
                                                            ch will be counted 
                                                            down --1
  119 00000050         
  120 00000050         start_width_loop
  121 00000050 086D            LSRS             R5, R5, #1  ; Shift from left t
                                                            o right and additio
                                                            naly check if there
                                                             will be a carry fl
                                                            ag set to 1 or not
  122 00000052 D301            BCC              end_width_loop ; If C-Flag is =
                                                            = 0 then go to labe
                                                            l "inside_loop"
  123 00000054         
  124 00000054         ; Execution continues here if C-Flag != 0
  125 00000054 0040            LSLS             R0, #1      ; Shfit all the 1 o
                                                            n the far right sid
                                                            e one step left, to
                                                             make place for the
                                                             upcoming 1
  126 00000056 1C40            ADDS             R0, R0, #1  ; Adds 1 on the far



ARM Macro Assembler    Page 5 


                                                             right. This indica
                                                            tes another 1 was f
                                                            ound in R5 (BCD)
  127 00000058         
  128 00000058         end_width_loop
  129 00000058 3901            SUBS             R1, #1
  130 0000005A D1F9            BNE              start_width_loop ; If Z == 0 th
                                                            en go to label "sta
                                                            rt_loop"
  131 0000005C         
  132 0000005C         ; Execution continues here if Z-Flag != 0
  133 0000005C 0406            LSLS             R6, R0, #16 ; Shifts the width-
                                                            block to the left w
                                                            ith Offset 16 (in t
                                                            his case this will 
                                                            be not seen in the 
                                                            beginning on the LE
                                                            D. because it's out
                                                            side the range 0-15
                                                            )
  134 0000005E 4306            ORRS             R6, R6, R0  ; Combines the far 
                                                            left width-block wi
                                                            th the far right wi
                                                            dt-block.
  135 00000060 0030            MOVS             R0, R6      ; Copies this new v
                                                            alue to R0
  136 00000062         
  137 00000062         rotate_full
  138 00000062 4C14            LDR              R4, =ADDR_LED_31_16
  139 00000064 8020            STRH             R0, [R4]
  140 00000066         
  141 00000066 2401            MOVS             R4, #1
  142 00000068 41E0            RORS             R0, R0, R4
  143 0000006A F7FF FFFE       BL               pause
  144 0000006E 42B0            CMP              R0, R6      ; Compare the both 
                                                            values R0 and R6. I
                                                            f R0 is less or equ
                                                            al to R6 then jump 
                                                            to label "rotate_fu
                                                            ll"
  145 00000070 D1F7            BNE              rotate_full
  146 00000072         
  147 00000072         
  148 00000072         ; END: To be programmed
  149 00000072         
  150 00000072 E7FE            B                main
  151 00000074                 ENDP
  152 00000074         
  153 00000074         ;----------------------------------------------------
  154 00000074         ; Subroutines
  155 00000074         ;----------------------------------------------------
  156 00000074         
  157 00000074         ;----------------------------------------------------
  158 00000074         ; pause for disco_lights
  159 00000074         pause   PROC
  160 00000074 B403            PUSH             {R0, R1}
  161 00000076 4903            LDR              R1, =1
  162 00000078 480F            LDR              R0, =0x000FFFFF
  163 0000007A         



ARM Macro Assembler    Page 6 


  164 0000007A         loop
  165 0000007A 1A40            SUBS             R0, R0, R1
  166 0000007C D2FD            BCS              loop
  167 0000007E         
  168 0000007E BC03            POP              {R0, R1}
  169 00000080 4770            BX               LR
  170 00000082 00 00           ALIGN
  171 00000084                 ENDP
  172 00000084         
  173 00000084         ; ------------------------------------------------------
                       ------------
  174 00000084         ; End of code
  175 00000084         ; ------------------------------------------------------
                       ------------
  176 00000084                 END
              00000001 
              0000000F 
              60000200 
              60000201 
              60000210 
              60000344 
              60000340 
              0000000A 
              0000FFFF 
              00000000 
              60000114 
              60000100 
              60000102 
              000FFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --apcs=interw
ork --depend=.\build\main.d -o.\build\main.o -I.\RTE\_Target_1 -I"C:\Users\Luca
 Archidiacono\AppData\Local\Arm\Packs\InES\CTBoard14_DFP\4.0.2\Device\Include" 
-I"C:\Users\Luca Archidiacono\AppData\Local\Arm\Packs\InES\CTBoard14_DFP\4.0.2\
Device\Include\m0" -I"C:\Users\Luca Archidiacono\AppData\Local\Arm\Packs\InES\C
TBoard14_DFP\4.0.2\HAL\Include" --predefine="__EVAL SETA 1" --predefine="__UVIS
ION_VERSION SETA 536" --predefine="_RTE_ SETA 1" --predefine="_RTE_ SETA 1" --l
ist=.\build\main.lst app\main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

end_branch 00000040

Symbol: end_branch
   Definitions
      At line 105 in file app\main.s
   Uses
      At line 89 in file app\main.s
Comment: end_branch used once
end_width_loop 00000058

Symbol: end_width_loop
   Definitions
      At line 128 in file app\main.s
   Uses
      At line 122 in file app\main.s
Comment: end_width_loop used once
loop 0000007A

Symbol: loop
   Definitions
      At line 164 in file app\main.s
   Uses
      At line 166 in file app\main.s
Comment: loop used once
main 00000000

Symbol: main
   Definitions
      At line 48 in file app\main.s
   Uses
      At line 49 in file app\main.s
      At line 150 in file app\main.s

multiply 00000020

Symbol: multiply
   Definitions
      At line 78 in file app\main.s
   Uses
      None
Comment: multiply unused
myCode 00000000

Symbol: myCode
   Definitions
      At line 44 in file app\main.s
   Uses
      None
Comment: myCode unused
pause 00000074

Symbol: pause
   Definitions
      At line 159 in file app\main.s
   Uses
      At line 143 in file app\main.s
Comment: pause used once
rotate_full 00000062




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: rotate_full
   Definitions
      At line 137 in file app\main.s
   Uses
      At line 145 in file app\main.s
Comment: rotate_full used once
shift_add 00000030

Symbol: shift_add
   Definitions
      At line 91 in file app\main.s
   Uses
      At line 76 in file app\main.s
Comment: shift_add used once
start_width_loop 00000050

Symbol: start_width_loop
   Definitions
      At line 120 in file app\main.s
   Uses
      At line 130 in file app\main.s
Comment: start_width_loop used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ADDR_7_SEG_BIN_DS3_0 60000114

Symbol: ADDR_7_SEG_BIN_DS3_0
   Definitions
      At line 28 in file app\main.s
   Uses
      At line 107 in file app\main.s
Comment: ADDR_7_SEG_BIN_DS3_0 used once
ADDR_BUTTONS 60000210

Symbol: ADDR_BUTTONS
   Definitions
      At line 29 in file app\main.s
   Uses
      At line 69 in file app\main.s
Comment: ADDR_BUTTONS used once
ADDR_DIP_SWITCH_15_8 60000201

Symbol: ADDR_DIP_SWITCH_15_8
   Definitions
      At line 27 in file app\main.s
   Uses
      At line 61 in file app\main.s
Comment: ADDR_DIP_SWITCH_15_8 used once
ADDR_DIP_SWITCH_7_0 60000200

Symbol: ADDR_DIP_SWITCH_7_0
   Definitions
      At line 26 in file app\main.s
   Uses
      At line 57 in file app\main.s
Comment: ADDR_DIP_SWITCH_7_0 used once
ADDR_LCD_BLUE 60000344

Symbol: ADDR_LCD_BLUE
   Definitions
      At line 33 in file app\main.s
   Uses
      At line 74 in file app\main.s
Comment: ADDR_LCD_BLUE used once
ADDR_LCD_GREEN 60000342

Symbol: ADDR_LCD_GREEN
   Definitions
      At line 32 in file app\main.s
   Uses
      None
Comment: ADDR_LCD_GREEN unused
ADDR_LCD_RED 60000340

Symbol: ADDR_LCD_RED
   Definitions
      At line 31 in file app\main.s
   Uses
      At line 75 in file app\main.s
Comment: ADDR_LCD_RED used once
ADDR_LED_15_0 60000100

Symbol: ADDR_LED_15_0



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 24 in file app\main.s
   Uses
      At line 111 in file app\main.s
Comment: ADDR_LED_15_0 used once
ADDR_LED_31_16 60000102

Symbol: ADDR_LED_31_16
   Definitions
      At line 25 in file app\main.s
   Uses
      At line 138 in file app\main.s
Comment: ADDR_LED_31_16 used once
BCD_MASK 0000000F

Symbol: BCD_MASK
   Definitions
      At line 38 in file app\main.s
   Uses
      At line 54 in file app\main.s
Comment: BCD_MASK used once
BUTTON_MASK 00000001

Symbol: BUTTON_MASK
   Definitions
      At line 37 in file app\main.s
   Uses
      At line 53 in file app\main.s
Comment: BUTTON_MASK used once
HEX_TEN 0000000A

Symbol: HEX_TEN
   Definitions
      At line 39 in file app\main.s
   Uses
      At line 79 in file app\main.s
Comment: HEX_TEN used once
LCD_BACKLIGHT_FULL 0000FFFF

Symbol: LCD_BACKLIGHT_FULL
   Definitions
      At line 34 in file app\main.s
   Uses
      At line 84 in file app\main.s
      At line 102 in file app\main.s

LCD_BACKLIGHT_OFF 00000000

Symbol: LCD_BACKLIGHT_OFF
   Definitions
      At line 35 in file app\main.s
   Uses
      At line 86 in file app\main.s
      At line 100 in file app\main.s

14 symbols
359 symbols in table
